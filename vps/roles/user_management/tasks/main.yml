---
# User Management Role
# Creates user with SSH key access and sudo privileges
# SSH access restrictions are handled by security_hardening role to prevent lockouts

# Define SSH key variables
- name: Set SSH key variables
  set_fact:
    expanded_ssh_key_dir: "{{ ssh_key_dir | expanduser }}"
    ssh_key_name: "{{ inventory_hostname | regex_replace('[^a-zA-Z0-9._-]', '_') }}_{{ ansible_user }}_key"

# Generate SSH key pair
- name: Create SSH key directory and generate key pair
  block:
    - name: Create SSH key directory
      file:
        path: "{{ expanded_ssh_key_dir }}"
        state: directory
        mode: "0700"

    - name: Generate SSH key pair
      openssh_keypair:
        path: "{{ expanded_ssh_key_dir }}/{{ ssh_key_name }}"
        type: rsa
        size: 4096
        comment: "{{ ansible_user }}@{{ inventory_hostname }}"
        force: no

    - name: Set SSH key permissions
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
      loop:
        - {
            path: "{{ expanded_ssh_key_dir }}/{{ ssh_key_name }}",
            mode: "0600",
          }
        - {
            path: "{{ expanded_ssh_key_dir }}/{{ ssh_key_name }}.pub",
            mode: "0644",
          }
  delegate_to: localhost
  become: no

# User management
- name: Create coolify group with GID 9999
  group:
    name: coolify
    gid: 9999
    state: present

- name: Add user to required groups (without modifying other attributes)
  user:
    name: "{{ ansible_user }}"
    groups: sudo,root,coolify
    append: yes
    # No shell, password, or other attributes specified to preserve existing values

- name: Configure user access
  block:
    - name: Setup SSH and sudo access
      block:
        - name: Set SSH directory path based on user
          set_fact:
            ssh_directory: "{{ '/root/.ssh' if ansible_user == 'root' else '/home/' + ansible_user + '/.ssh' }}"

        - name: Create .ssh directory
          file:
            path: "{{ ssh_directory }}"
            state: directory
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: "0700"

        - name: Add SSH public key using authorized_key module
          authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ lookup('file', '{{ expanded_ssh_key_dir }}/{{ ssh_key_name }}.pub') }}"
            state: present
            exclusive: no
            comment: "{{ ansible_user }}@{{ inventory_hostname }} generated by Ansible"
          register: authorized_key_result

        - name: Debug authorized_key result
          debug:
            msg: "SSH key {{ 'added' if authorized_key_result.changed else 'already exists' }}"
            verbosity: 1

        - name: Add user to sudoers
          lineinfile:
            path: /etc/sudoers.d/{{ ansible_user }}
            line: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
            create: yes
            mode: "0440"
            validate: "visudo -cf %s"

# Verification
- name: Test SSH connectivity
  command: ssh -i {{ expanded_ssh_key_dir }}/{{ ssh_key_name }} -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ansible_user }}@{{ ansible_host }} "echo 'SSH OK'"
  register: ssh_test
  delegate_to: localhost
  become: no
  ignore_errors: no

- name: Display setup summary
  debug:
    msg: |
      User '{{ ansible_user }}' configured successfully
      Groups: docker, sudo, root, coolify (GID: 9999)
      SSH Key: {{ 'VERIFIED' if ssh_test.rc == 0 else 'NEEDS ATTENTION' }}
      Connect: ssh -i {{ expanded_ssh_key_dir }}/{{ ssh_key_name }} {{ ansible_user }}@{{ ansible_host }}

      SECURITY NOTE: SSH user restrictions will be applied by security_hardening role
