
---
- name: Set SSH key variables
  set_fact:
    expanded_ssh_key_dir: "{{ ssh_key_dir | expanduser }}"
    ssh_key_name: "{{ inventory_hostname | regex_replace('[^a-zA-Z0-9._-]', '_') }}_{{ ansible_user }}_key"
    
- name: Create SSH banner
  copy:
    content: |
      **************************************************************************
      *                                                                        *
      *  This system is for authorized users only. All activity is monitored  *
      *  and logged. Unauthorized access is strictly prohibited.              *
      *                                                                        *
      **************************************************************************
    dest: /etc/ssh/banner
    mode: '0644'

- name: Backup original SSH configuration
  copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup
    remote_src: yes
    backup: yes

- name: Configure SSH hardening (AFTER user creation)
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    backup: yes
    mode: '0600'
  notify: restart ssh

- name: Validate SSH configuration
  command: sshd -t
  register: sshd_test
  failed_when: sshd_test.rc != 0

- name: Configure Fail2ban
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    backup: yes
  notify: restart fail2ban

- name: Start and enable Fail2ban
  systemd:
    name: fail2ban
    state: started
    enabled: yes

- name: Set up automatic security updates (Debian/Ubuntu)
  apt:
    name: unattended-upgrades
    state: present
  when: ansible_os_family == "Debian"

- name: Configure automatic security updates (Debian/Ubuntu)
  template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
  when: ansible_os_family == "Debian"

# =============================================================================
# CRITICAL SAFETY CHECKS BEFORE DISABLING ROOT ACCESS
# =============================================================================

- name: Verify user exists
  user:
    name: "{{ ansible_user }}"
    state: present
  check_mode: yes
  register: user_check
  failed_when: false

- name: Verify user has sudo access
  command: sudo -l -U {{ ansible_user }}
  register: sudo_check
  failed_when: false
  changed_when: false

- name: Check if user SSH key is properly configured
  stat:
    path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
  register: ssh_key_check

- name: Verify SSH key content exists
  command: cat /home/{{ ansible_user }}/.ssh/authorized_keys
  register: ssh_key_content
  changed_when: false
  failed_when: false

- name: Test SSH key authentication for user
  become: no
  command: ssh -i {{ expanded_ssh_key_dir }}/{{ ssh_key_name }} -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o PubkeyAuthentication=yes {{ ansible_user }}@{{ ansible_host }} "echo 'SSH verification successful'"
  register: ssh_verification_test
  ignore_errors: no
  delegate_to: localhost
  when: 
    - expanded_ssh_key_dir is defined
    - ssh_key_name is defined

# =============================================================================
# KERNEL SECURITY HARDENING
# =============================================================================

- name: Configure kernel parameters for security
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    # Enable IP forwarding - required for Docker to function properly
    - { name: "net.ipv4.ip_forward", value: "1" }
    
    # Disable sending ICMP redirects (prevent routing-based attacks)
    - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
    - { name: "net.ipv4.conf.default.send_redirects", value: "0" }
    
    # Disable accepting ICMP redirects (prevent malicious routing table changes)
    - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
    - { name: "net.ipv4.conf.default.accept_redirects", value: "0" }
    
    # Disable accepting "secure" ICMP redirects (even from gateways in route table)
    - { name: "net.ipv4.conf.all.secure_redirects", value: "0" }
    - { name: "net.ipv4.conf.default.secure_redirects", value: "0" }
    
    # Ignore broadcast ICMP echo requests (prevent Smurf DDoS attacks)
    - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
    
    # Ignore bogus ICMP error responses (reduce log spam from malformed packets)
    - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
    
    # Log packets with impossible source addresses ("martian" packets)
    - { name: "net.ipv4.conf.all.log_martians", value: "1" }
    - { name: "net.ipv4.conf.default.log_martians", value: "1" }
    
    # Restrict access to kernel logs via dmesg (prevent info leakage)
    - { name: "kernel.dmesg_restrict", value: "1" }
    
    # Hide kernel pointer addresses (prevent kernel exploitation)
    - { name: "kernel.kptr_restrict", value: "2" }
  tags: [security, kernel]