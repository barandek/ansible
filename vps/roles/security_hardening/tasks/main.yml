
---
- name: Create SSH banner
  copy:
    content: |
      **************************************************************************
      *                                                                        *
      *  This system is for authorized users only. All activity is monitored  *
      *  and logged. Unauthorized access is strictly prohibited.              *
      *                                                                        *
      **************************************************************************
    dest: /etc/ssh/banner
    mode: '0644'

- name: Backup original SSH configuration
  copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup
    remote_src: yes
    backup: yes

- name: Configure SSH hardening (AFTER user creation)
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    backup: yes
    mode: '0600'
  notify: restart ssh

- name: Validate SSH configuration
  command: sshd -t
  register: sshd_test
  failed_when: sshd_test.rc != 0

- name: Configure Fail2ban
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    backup: yes
  notify: restart fail2ban

- name: Start and enable Fail2ban
  systemd:
    name: fail2ban
    state: started
    enabled: yes

- name: Disable unused network protocols
  lineinfile:
    path: /etc/modprobe.d/blacklist-rare-network.conf
    line: "{{ item }}"
    create: yes
  loop:
    - "install dccp /bin/true"
    - "install sctp /bin/true"
    - "install rds /bin/true"
    - "install tipc /bin/true"

- name: Set up automatic security updates (Debian/Ubuntu)
  apt:
    name: unattended-upgrades
    state: present
  when: ansible_os_family == "Debian"

- name: Configure automatic security updates (Debian/Ubuntu)
  template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
  when: ansible_os_family == "Debian"

# =============================================================================
# CRITICAL SAFETY CHECKS BEFORE DISABLING ROOT ACCESS
# =============================================================================

- name: Verify custom user exists
  user:
    name: "{{ custom_user }}"
    state: present
  check_mode: yes
  register: custom_user_check
  failed_when: false

- name: Verify custom user has sudo access
  command: sudo -l -U {{ custom_user }}
  register: sudo_check
  failed_when: false
  changed_when: false

- name: Check if custom user SSH key is properly configured
  stat:
    path: "/home/{{ custom_user }}/.ssh/authorized_keys"
  register: ssh_key_check

- name: Verify SSH key content exists
  command: cat /home/{{ custom_user }}/.ssh/authorized_keys
  register: ssh_key_content
  changed_when: false
  failed_when: false

- name: Test SSH key authentication for custom user (CRITICAL SAFETY CHECK)
  become: no
  command: ssh -i {{ expanded_ssh_key_dir }}/{{ custom_user_ssh_key_name }} -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o PasswordAuthentication=no -o PubkeyAuthentication=yes {{ custom_user }}@{{ ansible_host }} "echo 'SSH verification successful'"
  register: ssh_verification_test
  ignore_errors: yes
  delegate_to: localhost
  when: 
    - expanded_ssh_key_dir is defined
    - custom_user_ssh_key_name is defined

- name: Display safety check results
  debug:
    msg: |
      === SAFETY CHECK RESULTS ===
      Custom user exists: {{ 'YES' if custom_user_check.name is defined else 'NO' }}
      Sudo access configured: {{ 'YES' if sudo_check.rc == 0 else 'NO' }}
      SSH authorized_keys exists: {{ 'YES' if ssh_key_check.stat.exists else 'NO' }}
      SSH key content present: {{ 'YES' if ssh_key_content.stdout | length > 0 else 'NO' }}
      SSH key authentication test: {{ 'PASS' if ssh_verification_test.rc == 0 else 'FAIL' }}
      Status: {{ 'SAFE TO DISABLE ROOT ACCESS' if (custom_user_check.name is defined and sudo_check.rc == 0 and ssh_key_check.stat.exists and ssh_key_content.stdout | length > 0) else 'NOT SAFE - KEEPING ROOT ACCESS ENABLED' }}

- name: Set safety flag based on checks
  set_fact:
    safe_to_disable_root: "{{ 
      custom_user_check.name is defined and 
      sudo_check.rc == 0 and 
      ssh_key_check.stat.exists and 
      ssh_key_content.stdout | length > 0 and
      (ssh_verification_test.rc == 0 if ssh_verification_test is defined else true)
    }}"

- name: Warning if not safe to disable root access
  debug:
    msg: |
      WARNING: Safety checks failed!
      Root password authentication will NOT be disabled.
      Please verify:
        1. Custom user '{{ custom_user }}' exists and has sudo access
        2. SSH key is properly configured in authorized_keys
        3. SSH key authentication works
      You can manually disable root access later with:
        sudo passwd -l root
        sudo usermod -s /usr/sbin/nologin root
  when: not safe_to_disable_root

- name: Disable root password authentication (FINAL STEP - ONLY IF SAFE)
  user:
    name: root
    password: "!"
  when: 
    - ansible_user == "root"
    - safe_to_disable_root

- name: Disable root shell access (ADDITIONAL SECURITY)
  user:
    name: root
    shell: /usr/sbin/nologin
  when: 
    - ansible_user == "root"
    - safe_to_disable_root
    - disable_root_shell | default(true)

- name: Display security hardening completion
  debug:
    msg: |
      SSH hardening applied successfully
      {{ 'Root password authentication disabled' if safe_to_disable_root else 'Root password authentication KEPT ENABLED (safety check failed)' }}
      {{ 'Root shell access disabled' if safe_to_disable_root else 'Root shell access KEPT ENABLED (safety check failed)' }}
      SSH password authentication disabled
      Fail2ban intrusion prevention enabled
      System security parameters configured
      {{ 'IMPORTANT: Root access is now DISABLED' if safe_to_disable_root else 'IMPORTANT: Root access is still ENABLED' }}
      {{ 'Use only SSH keys for authentication from now on' if safe_to_disable_root else 'Fix the issues above and manually disable root access' }}
